name: CiceroSCM-Runner CI-CD
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

jobs:
  linting-and-docs:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dev dependencies
      # why pandas 1.1.5 breaks pylint, I do not know
      run: |
        pip install --upgrade pip wheel
        pip install -e .[dev]
        pip install pandas==1.1.4
    - name: Formatting and linters
      run: |
        black --version
        black --check src tests --exclude ciceroscm/_version.py
        isort --version
        isort --check-only --quiet --recursive src tests
        pydocstyle --version
        pydocstyle src
        bandit --version
        bandit -c .bandit.yml -r src
        flake8 --version
        flake8 src tests
        pylint --version
        pylint src
    - name: Build docs
      # treat warnings as errors (-W)...
      # ...but not when being nitpicky (-n)
      run: |
          sphinx-build -M html docs/source docs/build -qW
          # Muted coverage-test for now
          #sphinx-build -M html docs/source docs/build -Eqn -b coverage
          #if [[ -s docs/build/html/python.txt ]]
          #then
          #    echo
          #    echo \"Error: Documentation missing:\"
          #    echo
          #    cat docs/build/html/python.txt
          #    exit 1
          #fi

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: [3.9, '3.10', '3.11']
    env:
      MIN_COVERAGE: 90

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install test dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[tests,models]
    - name: Test with pytest
      run: |
        pytest tests -r a --cov=ciceroscm --cov-report='' --cov-fail-under=$MIN_COVERAGE

  test-notebooks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install notebook dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[tests,models,notebooks]
    - name: Test notebooks with nbval
      run: |
          pytest notebooks -r a --nbval-lax --sanitize-with tests/notebook-tests.cfg --no-cov
    - name: Test notebooks strictly
      if: matrix.python-version == 3.8
      run: |
          pytest notebooks -r a --nbval --nbval-sanitize-with tests/notebook-tests.cfg --no-cov


  test-install:

    needs: [build,linting-and-docs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install
      run: |
        pip install --upgrade pip wheel
        pip install .
    - name: Test installation
      run: |
        pip list
        python scripts/test_install.py


  create-dist:

    needs: [build,linting-and-docs]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[dev]
    - name: Create package
      run: |
        python sdist bdist_wheel --universal
        twine check dist/*
    - uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist


  deploy-pypi:

    needs: [test-install,create-dist]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_api_token }}
